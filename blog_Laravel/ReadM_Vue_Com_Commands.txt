# Roadmap to start vue.js implement =>
    #1. Create one start source code core Vue.js file in "/resources/asset/js/someOneFile.js".
        For Example => \resources\assets\js\WpBlog_Vue\wpblog-vue-start
    #2. You have to include this file in webpack.mix as source file and specify the output folder, concatenated/uglified file will be saved in that folder with the same name. U have to add this file (public/js/Wpress_Vue_JS/wpblog-vue-start.js) in html =>
       .js('resources/assets/js/WpBlog_Vue/wpblog-vue-start.js',   'public/js/Wpress_Vue_JS')  //Vue.js; Source-> Destination
    #3. Include js file "public/js/Wpress_Vue_JS/wpblog-vue-start.js" in html (e.g views/layout/app.php)
	#4. Init some components in \resources\assets\js\WpBlog_Vue\wpblog-vue-start.js, then put this Vue components where u need in /views/../some_view_file
	    Example => Vue.component('create-post',  require('./components/CreatePost.vue')); => in html => <create-post/>
	#5. Run {npm run watch} to watch changes

	
 #Examples of a start Vue file see =>  /resources/assets/js/WpBlog_Vue/wpblog-vue-start.js
                                   =>  /resources/assets/js/Appointment/appoint-vue-start.js
								  

   
    
 
 Table of content:
   25.1 Change css based on props
   25.2 Vue ajax
   25.3 Add values to Object (Object that is from data, i.e equivalent of React State)
   25.4 Iterate over Object (Object that is from data, i.e equivalent of React State)
   25.4.2 Iterate over Array (Array that is from data, i.e equivalent of React State)
   25.5 Register components
   25.6 Use component in another component
   25.7 Click action
   25.8 Call function from other external file
   25.9 Vue store Vuex
   25.9.1 Vue Router
   26. Unsorted Vue (uplift to parent, pass to child, etc)
   
   
   ------------------------------
   25.1 Change css based on props =>
            <div class="panel-body" :class="cssState? ' text-danger' : ''"> <!-- change css based on props -->
			<div class="col-sm-12 col-xs-12 alert alert-info" :class="this.cssStateFlag ? ' text-danger' : 'text-info' "   id="userNameHint"> <!-- change css based on data -->
	
        # Display data =>  <div v-if="status_msg" class="alert-danger alert" role="alert"> {{ status_msg }} </div>	
        # let that = this; //"that" has been assigned the value of "this" at the top to avoid context related issues. Used in .then or ajax callbacks (success/failure)
		
		
  ------------------------------
   25.2 Vue ajax =>  
       Ajax in Vue can be used in different ways: can be used directly in component and set result to local data; or u can dispatch/trigger a Vuex Store method in local component, specify the logic/mutation in Vuex Store and use in local component as {this.$store.state.adm_posts_qunatity}
       #Example_1 (ajax used in component)  at => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Admin_Part/components/pages/list_all.vue
       #Example_2 (ajax used in Vuex Store )  => 
            Component    => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/components/pages/blog_2021.vue
            Vues store   => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/store/index.js
           
       #Example_3 at => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/Appointment/components/subcomponents/rooms-in-loop.vue
       #Example_4 at => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/Appointment/components/test-ajax.vue
	   
	   
	   mounted() {
            console.log('Component mounted.')
			
			var thisXCursor = this; //get context, is a must
			
			 $.get( 'http://localhost/Laravel+Yii2_comment_widget/blog_Laravel/public/api/articles' ) 
			 .then(function(dataZ) {  
	            console.log( dataZ ); 
				thisXCursor.info = dataZ; //assign ajax result to Object info() (Object that is from  data, i.e equivalent of React State)
	        });
			
	-----------------------------		 
	 25.3 Add values to Object (Object that is from data, i.e equivalent of React State)) =>		 
			 
				thisXCursor.info = Object.assign({}, thisXCursor.info, {
                   newProperty1: 'myNewValue',
                   newProperty2: 9311
                });
				
	------------------------------
	25.4 Iterate over Object (Object info{} that is from data, i.e equivalent of React State)
	    <div v-for="(value, name) in info">
            {{ name }}: {{ value.wpBlog_id }} {{ value.wpBlog_title }} {{ value }}
        </div>
		
    ------------------------------
	
	25.4.2 Iterate over Array (Array that is from data, i.e equivalent of React State)
        var_1 => <p v-for="item in companiesArray"> {{ item }} {{ value }}</p>
		
		var_2 => 
		        <!-- iterate over array -->
		        <div v-for="(item, index) in companies" :key="index">        
                    <one-room v-for="(item, index) in companies" :key="index" :itemZ="item" /> <!-- sendin props-->
                </div> 
				
	   var_3 iterate with componemt <one-room/>  =>
	      <one-room v-for="(item, index) in companies" :key="index" :itemZ="item" /> <!-- sendin props-->

    --------------------------------
    
    25.4.4 Iterate loop over  Vuex store, adding a "col-sm-12 col-xs-12"  after every 2nd "col-sm-6 col-xs-6" 
    
    <div class="row">
        
            <!-- Original -->
            <div v-for="(post, i) in posts" :key=i> <!-- or this.$store.state.posts -->
                
                <!-- is rendered only if i % 2 == 0 -->
                <div class="col-sm-12 col-xs-12"  style="border: 1px solid black;" v-if="i % 2 == 0"> 
                    banner 
                </div>
                
                <!-- is rendered always -->
                <div class="col-sm-6 col-xs-6">
	
                    <!-- Show 1st image if exists. HasMany Relation. {get_images} is a model {function getImages()}  HasMany Relation -->		 
                    <!--<img v-if="post.get_images.length" class="card-img-top my-img" :src="`images/${post.get_images[0].wpImStock_name}`" />-->
		
		            <!-- Image with LightBox -->
	                <a v-if="post.get_images.length" :href="`images/${post.get_images[0].wpImStock_name}`"   title="image" :data-lightbox="`roadtrip${post.wpBlog_id}`" > <!-- roadtrip + currentID, to create a unique data-lightbox name, so in modal LightBox will show images related to this article only, not all -->
                        <img v-if="post.get_images.length" class="card-img-top my-img" :src="`images/${post.get_images[0].wpImStock_name}`" />
	                </a>
                    <!-- End Image with LightBox -->
		
                    <div class="card-body">
                        <p class="card-text"><strong>{{ post.wpBlog_title }}</strong> <br>
                           {{ truncateText(post.wpBlog_text) }}
                        </p>
                    </div>
                    <button class="btn btn-success m-2 z-overlay-fix-2" v-on:click="viewPost(i)">View   <i class="fa fa-crosshairs" style="font-size:14px"></i></button>
                    <button class="btn btn-info m-2 z-overlay-fix-2"    @click="goTodetail(i)" > Router <i class="fa fa-tag" style="font-size:14px"></i></button>
		            <hr>
                </div>
            </div>
	     </div> <!-- end class="row"-->
         
    
    ----------------------------------
    
    25.4.5 Iterate over array without html tag
        <template v-for="(item2, index2) in vertical">
                <!-- Build empty td cell, used for building IF this iterator is undefined in gameHits[] -->            
                <td :key="index2" v-if="booksGet[index * horizontal + index2] == undefined " class="game-cell" :id="index * horizontal + index2"  @click="mainUserClick(index * horizontal + index2)">
                    Nul{{index * horizontal + index2}}                
                </td>
            
                <!-- Build taken td cell ("0" of "X"), used for building IF this iterator is defined in gameHits[] as ("0" of "X") -->            
                <td :key="index2" v-if="booksGet[index * horizontal + index2] != undefined " class="game-cell" :id="index * horizontal + index2"> <!-- if array el is not undefined, dispplay it's value -->
                    {{ booksGet[index * horizontal + index2 ] }} {{ index * horizontal + index2  }}     
                </td>
        </template>
    -----------------------------
    
    -----------------------------
	25.5 Register components => \resources\assets\js\Appointment/appoint-vue-start.js
    
    ----------------------------------------------
    
    25.6 Use component in another component => \resources\assets\js\Appointment\components\generateListOfRoom.js
	    <template>
           <div class="col-sm-12 col-xs-12">
               <h5>Hello from /subcomponents/room-in-loops</h5>				
		           <one-room></one-room>		   
	       </div>
        </template>

        <script>
        //using other sub-component 
        import oneRoom from './one-room.vue';  //import file from same level folder
	
        export default {
	        //using other sub-component 
	        components: {
                'one-room': oneRoom 
            },
	   
		    //i.e props
		    data: function () {
                return {
                   companies: [],
				   myStateTextX: "I am an appoint state",
				   cssState: false,
				   info: {}, 
                }
            },
			//...
		
		
		<p v-for="item in companies"> {{ item }}</p>
		
		NB: if troubles see => if in subcomponent in nested loops can't get passed from Parents props
        
        
		-------------------------
		 25.7 Click action
		<div class='subfolder shadowX' v-on:click="greet"></div>
		//...
		methods: {
			greet: function (event) {
                if (event) {
                  alert(event.target);
				  console.log(event.target)
                }
			}
		}
		//......
		
		
		-------------------------------------------------
		25.8 Call function from other external file, see example at => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/Appointment/components/subcomponents/one-room.vue
	       1. Create external file, e.g '/my_functions/scroll_function.js'
		         export const ScrollExternalFile = {
				     
					  scrollResults: function(divName, parent){}
				 };
			2. In targetted component => 
			    <script>
	            //import function from other external file
	            import {ScrollExternalFile} from '../my_functions/scroll_function.js';  //name in {} i.e 'ScrollExternalFile' must be cooherent to name in "export const ScrollExternalFile" in '/scroll_function.js'
				//.........
				
			3. Call the function in targetted component =>
			    ScrollExternalFile.scrollResults(".selected-room");
				
       
	        4.NB: if external file function uses {this}, e.g {this.gameHits}, u have to pass {this} as arg in targetted component, but in external file function can't use the same name {this} as arg, for example use {thisX}
	   
	   
        -------------------------------------------------
	    25.9 Vue store Vuex
		
		Main difference between Redux and Vuex - while Redux uses reducers Vuex uses mutations. In Redux state is always immutable, while in Vuex committing mutation by the store is the only way to change data
		#NB: must have Vuex dependecies in package.json, see example at => https://github.com/account931/Laravel_Vue_Blog/blob/main/package.json
        
		see example of Vuex store => 
		   #Vuex store itself                            
                 example_1 => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/store/index.js
		         example_2 => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/store/index.js

           #Store connected/initiated in main entry file 
                 example_1 => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/wpblog-vue-start.js
		         example_2 => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/wpblog-vue-start.js
           
           #Store used/displayed in component =>           
		              example_1 (with ajax) => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/AllPosts.vue
		              example_2             => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/pages/details.vue
                      example_3             => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/components/pages/blog_2021.vue
                      
		#working example how to change Vuex store from child component => see changeVuexStoreFromChild in  => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/AllPosts.vue
		
		
		//-------------------------------------------------------------------------------------
		# How To use Vuex store (brief roadmap):
		   # create store/index.js (see example link above)
		   
		   # import {Store} in main js => 
		          import store from '../store/index'; //import Vuex Store
				  const app2 = new Vue({
	                 store, //connect Vuex store, must-have
                     el: '#app2'
                  });
			
		   # Then use Vuex store in your component, 3 diffrent ways are avialble =>
		   
		    1. In needed component you may address Vuex store value as for example => this.$store.state.products[0].productId
            2. Or u can use ......mapState() and address Vuex store value by it's Stores's name, e.g "products".     
		       //...mapState(['products']) is needed for Vuex store, after it u may address Vuex Store value as {products} instead of {this.$store.state.products}
			   //mapState() gets Vuex Store data to local data, so u can address it like local {products} 
   
		        <script>
                    import { mapState } from 'vuex';
			        computed: {  //computed property is used to declaratively describe a value that depends on other values. When you data-bind to a computed property inside the template, Vue knows when to update the DOM when any of the values depended upon by the computed property has changed.

	                    ...mapState(['products']), //{products} is from Vuex store
			 			//...................................
			3. Use computed, => see "3" next paragraph 
	 
		   #So actually u can address Vuex store value in template in three different ways  => 
		      1.if didn't use {...mapState()} => {{ this.$store.state.products[0].productId }}
			  2.if used {...mapState()}       => {{ products[0].productId }}  + like in 1st variant
		      3.if used computed: {checkStore() {return this.$store.state.products;} }, ) =>  {{  checkStore[0].productId }} 

		   
		   

		//-------------------------------------------------------------------------------------
		
		
		# How To use Vuex store with Ajax (brief roadmap), see example Link above at =>  example_1 (with ajax)
		  1. Mind the prev chapter "How To use Vuex store (brief roadmap)"
		  2. In needed child component trigger firing an ajax method "getAllPosts" => 
		         beforeMount() {
                    //run ajax in Vuex store
                    this.$store.dispatch('getAllPosts'); //trigger ajax function getAllPosts(), which is executed in Vuex store
	
		  3. In Vuex store (resorces/assets/js/store/index.js) specify method {getAllPosts} => in {getAllPosts} first run ajax to REST Controller, then in success run mutation method {setPosts} => return commit('setPosts', dataZ );
		
		
		//-------------------------------------------------------------------------------------
        
        # How to update/change Vuex store from child component => see example at => this.$store.dispatch('changeVuexStoreFromChild', dataTest); =>  https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/components/AllPosts.vue
		
  
		-------------------------------------------------
		25.9.1 Vue Router
		npm install vue-router --save
		
		# Router example => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/router/index.js
	    # Component with Menu Vue-Router is inited here   => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/wpblog-vue-start.js
		# Component with Menu Vue-Router Links and with view area <router-view/> => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/VueRouterMenu.vue
		# Vue-Router Menu's pages are in => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/tree/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/pages
		
		
		
		-------------------------------------------------
		26. Unsorted Vue (uplift to parent, pass to child, etc)
		------------------------------------------------
		# how to use data (equivalent of React state)=>
		     <template> {{count}} </template>
			 <script>
			 //..
			 data()  { return{ count: 0 } },
			 methods:{ increment(){this.count +=1;} },
		  
		  
		  
		# set data attribute => <div class='subfolder shadowX' v-on:click="greet" v-bind:data-id="this.itemZ" >
		# get data attribute => greet: function (event) {
			    alert(event.currentTarget.getAttribute('data-id')); }
		
		-----------------
        # pass from parent to child =>
		    in Parent => <selectedRoom :clickedX="this.idClicked"/>
		    in Child =>  
		        export default {
		            props: ['clickedX',],
		         //.....
		     in template =>
		         <p> Room {{  this.clickedX }}  </p>
		
		-------------------
		# uplift value from child to parent => see 2 examples at child => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/Appointment/components/subcomponents/one-room.vue
		                                       parent is => /rooms-in-loop.js		
        in Child=> 
		        methods: {
                     onClickButton (event) {
                         this.$emit('clicked', 'someValue')
                     }
		
		    in parent => 
		        <child @clicked="onClickChild"></child>
         
                //...
                methods: {
                   onClickChild (value) {
                       console.log(value) // someValue
                    }
        -------------------
        
        # same flow (as uplift value from child to parent) goes to call parent method from child =>
            => see parent example => https://github.com/account931/CPH_miscellaneous/blob/main/Tic_tac_Vue_Framework/src/components/TicTac/TicTacStart.vue
            => see child example  => https://github.com/account931/CPH_miscellaneous/blob/main/Tic_tac_Vue_Framework/src/components/TicTac/sub_components/gameField.vue

        -------------------
        # pass props to child on ternary => 
		     <selectedRoom :clickedX="this.idClicked" :hostname="typeof(this.idClicked)=== 'string' ? 'No select so far' : this.roomsX[this.idClicked].r_host_name "/>
        
		# Image in Vue =>    <img v-if="post.get_images.length" class="card-img-top" :src="`images/wpressImages/${post.get_images[0].wpImStock_name}`" />
        
        # Image in Vue with if(){} else {} . Example is from Loop =>    
                    <img v-if="post.get_images.length" class="card-img-top my-img" :src="`images/${post.get_images[0].wpImStock_name}`" />
                    <img v-else class="card-img-top my-img" :src="`images/no-image-found.png`" />
                     
        # Import/include a file at same folder level => import store from './store/index'; , to import file one level up => import store from '../store/index';
        
		# LightBox Library on Vue vs Blade php =>
		
		    <!----- Blade php Image with LightBox -->
			<a href="{{URL::to("/")}}/images/wpressImages/{{$x->wpImStock_name}}"  title="" data-lightbox="roadtrip{{$a->wpBlog_id}}"> <!-- roadtrip + currentID, to create a unique data-lightbox name, so in modal LightBox will show images related to this article only, not all -->
			   <img class="image-main" src="{{URL::to("/")}}/images/wpressImages/{{$x->wpImStock_name}}"  alt="img"/>
			</a>
		    <!-- End Blade php Image with LightBox -->
		
		
            <!------ VUE Image with LightBox -->
	        <a v-if="post.get_images.length" :href="`images/wpressImages/${post.get_images[0].wpImStock_name}`"   title="some" :data-lightbox="`roadtrip${post.wpBlog_id}`" > <!-- roadtrip + currentID, to create a unique data-lightbox name, so in modal LightBox will show images related to this article only, not all -->
               <img v-if="post.get_images.length" class="card-img-top my-img" :src="`images/wpressImages/${post.get_images[0].wpImStock_name}`" />
	        </a>
            <!-- End VUE Image with LightBox -->
			
			
		# How to refer laravel csrf field inside a vue template =>
		     <input type="hidden" name="_token" :value="tokenXX" /> <!-- csfr token -->
			 //...
			 data () {
                 return {
	                 tokenXX:'',
                 }
             },
			 //......
			 mounted () {
                 let token = document.head.querySelector('meta[name="csrf-token"]'); //gets meta
	             this.tokenXX = token.content; //gets token and set to data.tokenXX
            },
			
		# How to get route ID => e.g "wpBlogVueFrameWork#/details/2", gets 2. See example => https://github.com/account931/Laravel-Yii2_Comment_Vote_widgets/blob/master/blog_Laravel/resources/assets/js/WpBlog_Vue/components/pages/details.vue
	       var ID = this.$route.params.Pid; //gets 2  //{Pid} is set in 'pages/home' in => this.$router.push({name:'details',params:{Pid:proId}})

        # Pass var from php to vue component => 
            1.  in view => <vue-router-menu-with-link-content-display v-bind:current-user='{!! Auth::user()->toJson() !!}'>  //User array contains id, name, api_token, etc
            1.2 For strings use double quotes "'string'" =>  
                           <vue-router-menu-with-link-content-display v-bind:current-user="'someString'" >         <!-- Passport Changes (double quotes is a must-have FIX)-->

            2. in component add => 
               <script>
               export default {
                   props: ['currentUser'],
                   //......................
            3. and can use in component as => {{this.currentUser.api_token}}
            
        # Pass data between router component =>  see example at =>https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/router/index.js
            1. add {props} at /router/index.js  to targeted router component =>  
               path: '/New_2021', 
               name: 'new_2021', //same as in component return section
               component: blog_2021,  //component itself
               props: { tokenZZ: 'FFFFFFFFV' },
            2. use in component as => {{tokenZZ}} 

        # Problem with {this}, e.g can't set state in ajax success (this.List = someResult) => 
          Explaination => if you use this.data, it is incorrect, because when 'this' reference the vue-app, you could use this.data, but here (ajax success callback function), this does not reference to vue-app, instead 'this' reference to whatever who called this function(ajax call)
          const that = this;   //or var that = this; 
          that.List =  someResult   

        # Vue ensure state Reactivity (e.g state.errorList gets some result on ajax success) => see example and note issue with {var that = this;} => booksGet =>  https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Vue/components/pages/loadnew.vue      
        
        # Vue comment => {{ /* checkStore */ }}  VS <!--{{ this.$store.state.posts.length }}-->
        
        # Vue assign id => <div v-for="(postAdmin, i) in booksGet" :key=i class="col-sm-12 col-xs-12 oneAdminPost" :id="postAdmin.wpBlog_id"> 
        # Vue get id of clicked => @click="deletePost(postAdmin.wpBlog_id)   => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Admin_Part/components/pages/list_all.vue
        # Vue set inpt value with ajax response => v-model="inputTitleValue" => https://github.com/account931/Laravel_Vue_Blog/tree/main/resources/assets/js/WpBlog_Admin_Part/components/pages/editItem.vue


        # Use dispatch with argument(can use 1 arg only) (dispatch to fire some action in Vuex Store from some other component) =>
            #In ajax, see example at => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/WpBlog_Admin_Part/components/pages/list_all.vue => 
                var that = this; //Explaination => if you use this.data, it is incorrect, because when 'this' reference the vue-app, you could use this.data, but here (ajax success callback function), this does not reference to vue-app, instead 'this' reference to whatever who called this function(ajax call)
              
		        $.ajax({
                   //......
                   success: function(data) {
                       that.$store.dispatch('setPostsQuantity', data.data.length); 
          
            #In Vuex Store, see example at  => https://github.com/account931/Laravel_Vue_Blog/blob/main/resources/assets/js/store/index.js =>
                
                actions: {
                    setPostsQuantity ({ commit, state  }, passedArgument) {  //state is a fix
                       return commit('setQuantMutations', passedArgument ); //to store via mutation
                    },
                },
               
                mutations: {
                    //mutation to quantity of Blog to STORE
                    setQuantMutations(state, myPassedArg) {
                        state.adm_posts_qunatity = myPassedArg;        
                    },
          
            # Getter value isLoggedIn based on computed property of other state => 
                getters: {
                    isLoggedIn: state => !!state.passport_api_tokenY, //get value (true/false) based on other state
            
                Use in other component => <p> {{this.$store.getters.isLoggedIn}} </p> 
            
                Or do checking =>
                    Variant 1 => 
                       < div v-if="this.$store.state.passport_api_tokenY !== null"> Logged <logged-user-page></logged-user-page></div>
                        <div v-else class="col-sm-12 col-xs-12 alert alert-danger"> Not logged </div>
                    Variant 2 => 
                        <div v-if="this.$store.getters.isLoggedIn"> Logged </div>
                        <div v-else class="col-sm-12 col-xs-12 alert alert-danger"> Not logged</div>
                        
                        
            -----------------------------------
            
            # {{index * 3 + index2}} <!-- fu**ing iterator for 2 loops one in other, just tobreplace simple i++ -->
            
            #   //this.gameHits[item] = "x"; //add to main array //VUE ALERT: this approach is NOT reactive
                this.gameHits.splice(item, 0, "x"); //to ensure reactivity should use this approach to change array


            #if in subcomponent in nested for loops u can't get passed from Parents props, then use computed to get them => 
                => computed: { fkGetVertical () { return this.verticalX;}, }